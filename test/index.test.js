"use strict";var e=require("../src/");test("isObject",()=>{expect((0,e.isObject)("")).toEqual(!1),expect((0,e.isObject)([])).toEqual(!0),expect((0,e.isObject)({})).toEqual(!0),expect((0,e.isObject)(null)).toEqual(!1),expect((0,e.isObject)("   ")).toEqual(!1),expect((0,e.isObject)(void 0)).toEqual(!1)}),test("empty",()=>{expect((0,e.empty)(0)).toEqual(!0),expect((0,e.empty)([])).toEqual(!0),expect((0,e.empty)({})).toEqual(!0),expect((0,e.empty)(null)).toEqual(!0),expect((0,e.empty)("   ")).toEqual(!1),expect((0,e.empty)(void 0)).toEqual(!0)}),test("blank",()=>{expect((0,e.blank)("")).toEqual(!0),expect((0,e.blank)([])).toEqual(!0),expect((0,e.blank)({})).toEqual(!0),expect((0,e.blank)(null)).toEqual(!0),expect((0,e.blank)("   ")).toEqual(!0),expect((0,e.blank)(void 0)).toEqual(!0)}),test("sleep",async()=>{await(0,e.sleep)(),expect(1).toEqual(2-1)}),test("rand",()=>{expect((0,e.rand)(0,3)).toBeLessThan(4)}),test("paths",()=>{const t=(0,e.paths)({a:1,b:{c:3}});expect(t.every(a=>["a","b.c"].includes(a))).toEqual(!0)}),test("has",()=>{expect((0,e.has)({a:1,b:{c:3}},"b.c")).toEqual(!0)}),test("get",()=>{expect((0,e.get)({a:1,b:{c:3}},"b.c")).toEqual(3)}),test("clone",()=>{const t={a:1,b:{c:3}},a=(0,e.clone)(t);expect(t===a).toEqual(!1),expect(t!==a).toEqual(!0),expect(t).toMatchObject(a)});
